# Editorial and technical notes { }

In this page we describe the philosophical approach, style, and specific editorial decisions made during the creation of this handbook.  


## Approach and style

The potential audience for this book is large. It will surely be used by people very new to Julia, and also by experienced Julia users looking for best practices and tips. So it must be both accessible and succinct. Therefore, our approach was to provide *just enough* text explanation that someone very new to Julia can apply the code and follow what the code is doing.  

A few other points:  

* This is a code reference book accompanied by relatively brief examples - *not* a thorough textbook on Julia or data science  
* This is a *Julia handbook* for use within applied epidemiology - not a manual on the methods or science of applied epidemiology  
* This is intended to be a living document - optimal Julia packages for a given task change often and we welcome discussion about which to emphasize in this handbook  

### Julia packages {.unnumbered}

**So many choices**  

One of the most challenging aspects of learning Julia is knowing which Julia package to use for a given task. It is a common occurrence to struggle through a task only later to realize - hey, there's a Julia package that does all that in one command line!  

In this handbook, we try to offer you at least two ways to complete each task: one tried-and-true method (probably in **base** Julia) and one special Julia package that is custom-built for that purpose. We want you to have a couple options in case you can't download a given package or it otherwise does not work for you.  

In choosing which packages to use, we prioritized Julia packages and approaches that have been tested and vetted by the community, minimize the number of packages used in a typical work session, that are stable (not changing very often), and that accomplish the task simply and cleanly  

This handbook generally prioritizes Julia packages which mimic the R packages and functions from the **tidyverse**. Tidyverse is a collection of R packages designed for data science that share underlying grammar and data structures. All tidyverse packages can be installed or loaded via the **tidyverse** package. Read more at the [tidyverse website](https://www.tidyverse.org/).  

When applicable, we also offer code options using **base** Julia - the packages and functions that come with Julia at installation. This is because we recognize that some of this book's audience may not have reliable internet to download extra packages.  

**Linking functions to packages explicitly**

It is often frustrating in R tutorials when a function is shown in code, but you don't know which package it is from! We try to avoid this situation.  

In the narrative text, package names are written in bold (e.g. **DataFrames**) and functions are written like this: `transform()`. We strive to be explicit about which package a function comes from, either by referencing the package in nearby text or by specifying the package explicitly in the code like this: `df::transform()`. It may look redundant, but we are doing it on purpose.  

See the page on [Julia basics] to learn more about packages and functions.  

### Code style {.unnumbered}

In the handbook, we frequently utilize "new lines", making our code appear "long". We do this for a few reasons:  

* We can write explanatory comments with `#` that are adjacent to each little part of the code  
* Generally, longer (vertical) code is easier to read  
* It is easier to read on a narrow screen (no sideways scrolling needed)  
* From the indentations, it can be easier to know which arguments belong to which function  

As a result, code that *could* be written like this:  

```{julia}


```

...is written like this:  

Julia code is generally not affected by new lines or indentations. When writing code, if you initiate a new line after a comma it will apply automatic indentation patterns. 

We also use lots of spaces (e.g. `n = 1` instead of `n=1`) because it is easier to read. Be kind to the people reading your code!  

### Nomenclature {.unnumbered}  

In this handbook, we generally reference "columns" and "rows" instead of "variables" and "observations". As explained in this primer on ["tidy data"](https://tidyr.tidyverse.org/articles/tidy-data.html), most epidemiological statistical datasets consist structurally of rows, columns, and values.  

*Variables* contain the values that measure the same underlying attribute (like age group, outcome, or date of onset). *Observations* contain all values measured on the same unit (e.g. a person, site, or lab sample). So these aspects can be more difficult to tangibly define.  

In "tidy" datasets, each column is a variable, each row is an observation, and each cell is a single value. However some datasets you encounter will not fit this mold - a "wide" format dataset may have a variable split across several columns (see an example in the [Pivoting data] page). Likewise, observations could be split across several rows.  

Most of this handbook is about managing and transforming data, so referring to the concrete data structures of rows and columns is more relevant than the more abstract observations and variables. Exceptions occur primarily in pages on data analysis, where you will see more references to variables and observations.  

### Notes {.unnumbered} 

Here are the types of notes you may encounter in the handbook: 


::: {.callout-note}
This is an example of a note
:::


::: {.callout-tip}
## Tip 
This is an example of a tip. 
:::



::: {.callout-warning}
## Warning

This is an example of a warning.
:::


::: {.callout-important}
## Danger

This is an example of an important point.
:::



::: {.callout-caution collapse="true"}
## Expand for more detail

This is an example of a 'folded' code where you can learn more advanced or extra code that is otherwise not essential to the chapter. 


```{julia}
#| echo: true

## For example some difficult math
 1 + 1 
```
:::

Below, we track significant editorial decisions around package and function choice. If you disagree or want to offer a new tool for consideration, please join/start a conversation on our [Github page](https://github.com/appliedepi/epijuliahandbook_eng).    




Subject           |     Considered      |   Outcome              |    Brief rationale   
----------------- | --------------------|------------------------|---------------------
nothing           | to see              |here                    | friends

: Package, function, and other editorial decisions {#tbl-editorial_choices}

## Major revisions  


Date           |Major changes        
---------------| ------------------------   
03 Feb 2021    |Tumbleweeds

**NEWS**
With version 1.0.1 the following changes have been implemented:  

* more tumble weeds 


## Session info (Julia, VScode, packages)  

Below is the information on the versions of Julia, VScode, and Julia packages used during this rendering of the Handbook.  


```{julia}
using Pkg
Pkg.status()
```
